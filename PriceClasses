import datetime
import random  # For simulating market price fetching (you can replace this with your actual logic)
import board
import adafruit_character_lcd.character_lcd_rgb_i2c as character_lcd

class MarketPriceFetcher:
    def fetch_market_price(self, product_id):
        # Simulate fetching the market price from an external source (e.g., an API)
        # In practice, you would replace this with actual price fetching logic
        return random.uniform(5.0, 20.0)  # Replace with your logic

class PriceTag:
    def __init__(self, product_id, current_price):
        self.ProductID = product_id
        self.CurrentPrice = current_price
        self.LastUpdated = datetime.datetime.now()

    def update_price(self, new_price):
        self.CurrentPrice = new_price
        self.LastUpdated = datetime.datetime.now()

    def __str__(self):
        return f"Product ID: {self.ProductID}\nCurrent Price: {self.CurrentPrice}\nLast Updated: {self.LastUpdated}"

class Product:
    def __init__(self, product_id, name, description, price):
        self.ProductID = product_id
        self.Name = name
        self.Description = description
        self.Price = price

    def get_current_market_price(self, market_price_fetcher):
        market_price = market_price_fetcher.fetch_market_price(self.ProductID)
        return market_price

    def __str__(self):
        return f"Product ID: {self.ProductID}\nName: {self.Name}\nDescription: {self.Description}\nPrice: {self.Price}"

class ItemPrice(PriceTag):
    def __init__(self, product_id, current_price, name, currency):
        super().__init__(product_id, current_price)
        self.Name = name
        self.Currency = currency

    def __str__(self):
        return f"Name: {self.Name}\n{super().__str__()}\nCurrency: {self.Currency}"

class VPTController:
    def __init__(self):
        # Initialize the LCD display
        lcd_columns = 16
        lcd_rows = 2
        i2c = board.I2C()
        lcd = character_lcd.Character_LCD_RGB_I2C(i2c, lcd_columns, lcd_rows)

        self.lcd = lcd

    def update_price_display(self, product):
        # Display the product's current price on the LCD
        price_text = f"Price: ${product.Price:.2f}"
        self.lcd.clear()
        self.lcd.message = price_text

# Example usage:
market_price_fetcher = MarketPriceFetcher()

product1 = Product("P123", "Widget", "A simple widget", 10.99)
print(product1)

# Get and update the current market price of the item
current_market_price = product1.get_current_market_price(market_price_fetcher)
print(f"Current Market Price: {current_market_price}")

item1 = ItemPrice(product1.ProductID, current_market_price, product1.Name, "USD")
print(item1)

# Initialize the VPTController
vpt_controller = VPTController()

# Update the price display on the physical price tag
vpt_controller.update_price_display(item1)
